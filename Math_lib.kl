PROGRAM mAth_lib
-------------------------------------------------------------------------------
%ENVIRONMENT REGOPE

ROUTINE kramer(A, D: ARRAY [*,*] OF REAL)  : ARRAY[*,*] OF REAL FROM Matrix_lib
ROUTINE fill_MX(A11, A12, A13, A21, A22, A23, A31, A32, A33 :  REAL)  : ARRAY[*,*] OF REAL FROM Matrix_lib
--=================fill frame for coordinate============================
ROUTINE Fill_PRM(X,Y,Z,w,p,r : REAL): XYZWPR 
VAR
	RES : XYZWPR
	
BEGIN
	RES.X = X
	RES.Y = Y
	RES.Z = Z
	RES.W = W
	RES.P = P
	RES.R = R
	
	RETURN(RES)
END Fill_PRM

--=================distance betwin to point============================
ROUTINE Dist(P1,P2: XYZWPR): REAL 
VAR
	d : REAL

BEGIN
	D=  (P2.z-P1.z)*(P2.z-P1.z) 
	D=  D + (P2.y-P1.y)*(P2.y-P1.y) 
	D=  D + (P2.x-P1.x)*(P2.x-P1.x) 
	D = SQRT (D)
	RETURN(D)
END Dist

--=================centr and radius==================================
ROUTINE Calc_circ(P1,P2,P3,C : XYZWPR; R: REAL )
VAR
 X1,X2,X3, Y1,Y2,Y3, M1,M2 : REAL

BEGIN
	--calculate centr of circle
	X1=P1.X
	X2=P2.X
	X3=P3.X

	Y1=P1.Y
	Y2=P2.Y
	Y3=P3.Y
	
	M1=(Y2-Y1) / (X2-X1)
	M2=(Y3-Y2) / (X3-X2)
	
	C.X=(M1*M2*(y1-y3) + M2*(X1+X2) - M1*(X2+X3)) / (2*(M2-M1)) --X coordinate
		
	C.Y=((X2+X3)/2 - C.X)/M2 + (Y2+Y3)/2 --Y coordinate

	C.Z = 0
	C.W = 0
	C.P = 0
	C.R = 0
	
			
	--calc radius of pipe,
	R = SQRT((C.x-P1.x)*(C.x-P1.x) + (C.y-P1.y)*(C.y-P1.y) )
		

END Calc_circ

--=================centr of mass===========================
ROUTINE CNTR_GRAV(P1,P2,P3,P4: XYZWPR): XYZWPR 
VAR
	Res : XYZWPR

BEGIN
	Res.X = (P1.X + P2.X + P3.X + P4.X)/4
	Res.Y = (P1.Y + P2.Y + P3.Y + P4.Y)/4
	Res.Z = (P1.Z + P2.Z + P3.Z + P4.Z)/4
	Res.W = 0
	Res.P = 0
	Res.R = 0
	
	RETURN(RES)
END CNTR_GRAV


--=================centr of  circl in 3D===========================
ROUTINE CALC_CNTR(P1,P2,P3, C : XYZWPR; R: REAL)
VAR
	TMP_FRM, rP1, rP2, rP3 : XYZWPR

BEGIN
	
		--calculate temporary frame
	TMP_FRM = FRAME(P1,P3,P2)
	
	--calculate realtive coord  rel TMP_FRM
	rP1 = INV(TMP_FRM) : P1
	rP2 = INV(TMP_FRM) : P2
	rP3 = INV(TMP_FRM) : P3
		
	--calculate Circl
	Calc_circ(rP1, rP2, rP3, C, R)
	
	--calc cnt in ORIGIN frame
	C = TMP_FRM : C 

END CALC_CNTR
--=========================

--=================Projection Point to XY of FRM===========================
ROUTINE Proj_XY (Point, FRM: XYZWPR): XYZWPR
VAR
	TMP_FRM: XYZWPR

BEGIN
	TMP_FRM = INV(FRM) : Point
	TMP_FRM. Z = 0
	
	TMP_FRM = FRM : TMP_FRM
	
	RETURN(TMP_FRM)
END Proj_XY
--=========================

--=================Crossing Point of Z-line and XY-plane===========================
ROUTINE Cross_PNT (Line_frame, plane_frame: XYZWPR): XYZWPR 
VAR
	pl1, pl2, pl3, pl4, pp1, pp2, pp3 , TMP_FRM: XYZWPR
	M1, M2, M3, Ma, Mc : ARRAY [3,3] OF REAL 
	

BEGIN
	
		-- get two point on Z axis and two point out of Z -axis
	Pl1 = Line_frame
	Pl2 = Line_frame : fill_prm(0,0,1000,	0,0,0)
	Pl3 = Line_frame : fill_prm(0,1000,500,	0,0,0)
	Pl4 = Line_frame : fill_prm(1000,0,500,	0,0,0)
	
		-- get 3-point on XY-plane rame
	PP1 = plane_frame
	PP2 = plane_frame : fill_prm(1000,0,0,	0,0,0)
	PP3 = plane_frame : fill_prm(0,1000,0,	0,0,0)
	
	
	Ma = fill_MX(PL1.x,	PL1.y,	PL1.z,
				  PL2.x,	PL2.y,	PL2.z,
				  PL3.x,	PL3.y,	PL3.z)
	
		-- suppose the plane dosn't pass throught the origin
	Mc = fill_MX(1,	0,	0,
				 1,	0,	0,
				 1,	0,	0)
	
	M1 = kramer(Ma, Mc)-- coefficient 1st plane
	
	Ma = fill_MX(PL1.x,	PL1.y,	PL1.z,
				  PL2.x,	PL2.y,	PL2.z,
				  PL4.x,	PL4.y,	PL4.z)
	M2 = kramer(Ma, Mc) -- coefficient 2nd plane
	
	Ma = fill_MX(Pp1.x,	PP1.y,	Pp1.z,
				  Pp2.x,	Pp2.y,	Pp2.z,
				  Pp3.x,	Pp3.y,	Pp3.z)
	M3 = kramer(Ma, Mc) -- coefficient main plane 
	
	Ma = fill_MX(M1[1,1],	M1[2,1],	M1[3,1],
				  M2[1,1],	M2[2,1],	M2[3,1],
				  M3[1,1],	M3[2,1],	M3[3,1])
				  
	M3 = kramer(Ma, Mc) -- cross point
	
	TMP_FRM.X = M3[1,1]
	TMP_FRM.Y = M3[2,1]
	TMP_FRM.Z = M3[3,1]
	TMP_FRM.W = Line_frame.W
	TMP_FRM.P =  Line_frame.P
	TMP_FRM.R =  Line_frame.R
	
	RETURN(TMP_FRM)
END Cross_PNT

--=================Crossing Point of X -line and YZ -plane===========================
ROUTINE Cross_PNT_YZ (Line_frame, plane_frame: XYZWPR): XYZWPR 
VAR
	pl1, pl2, pl3, pl4, pp1, pp2, pp3 , TMP_FRM: XYZWPR
	M1, M2, M3, Ma, Mc : ARRAY [3,3] OF REAL 
	

BEGIN
	
		-- get two point on X axis and two point out of X -axis
	Pl1 = Line_frame
	Pl2 = Line_frame : fill_prm(1000,0,0,	0,0,0)
	Pl3 = Line_frame : fill_prm(0,1000,1000, 	0,0,0)
	Pl4 = Line_frame : fill_prm(0,-1000,1000,	0,0,0)
	
		-- get 3-point on YZ-plane of plane frame
	PP1 = plane_frame
	PP2 = plane_frame : fill_prm(0,0,1000,	0,0,0)
	PP3 = plane_frame : fill_prm(0,1000,0,	0,0,0)
	
	
	Ma = fill_MX(PL1.x,	PL1.y,	PL1.z,
				  PL2.x,	PL2.y,	PL2.z,
				  PL3.x,	PL3.y,	PL3.z)
	
		-- suppose the plane dosn't pass throught the origin
	Mc = fill_MX(1,	0,	0,
				 1,	0,	0,
				 1,	0,	0)
	
	M1 = kramer(Ma, Mc)-- coefficient 1st plane of line-frame
	
	Ma = fill_MX(PL1.x,	PL1.y,	PL1.z,
				  PL2.x,	PL2.y,	PL2.z,
				  PL4.x,	PL4.y,	PL4.z)
	M2 = kramer(Ma, Mc) -- coefficient 2nd plane of line-frame
	
	Ma = fill_MX(Pp1.x,	PP1.y,	Pp1.z,
				  Pp2.x,	Pp2.y,	Pp2.z,
				  Pp3.x,	Pp3.y,	Pp3.z)
	M3 = kramer(Ma, Mc) -- coefficient YZ-plane of Plane frame
	
	Ma = fill_MX(M1[1,1],	M1[2,1],	M1[3,1],
				  M2[1,1],	M2[2,1],	M2[3,1],
				  M3[1,1],	M3[2,1],	M3[3,1])
				  
	M3 = kramer(Ma, Mc) -- cross point
	
	TMP_FRM.X = M3[1,1]
	TMP_FRM.Y = M3[2,1]
	TMP_FRM.Z = M3[3,1]
	TMP_FRM.W = Line_frame.W
	TMP_FRM.P =  Line_frame.P
	TMP_FRM.R =  Line_frame.R
	
	RETURN(TMP_FRM)
END Cross_PNT_YZ

--=================Crossing Line of two plane===========================
ROUTINE Cross_Line (plane1, plane2: XYZWPR): XYZWPR -- FL frame line  FPframe plane
VAR
	p1, p2, p3, p4, p5, p6, TMP_FRM: XYZWPR
	M1, M2, M3, Ma, Mc : ARRAY [3,3] OF REAL 
	flag : BOOLEAN
	i : INTEGER

BEGIN
	-- get 3-point on XY-plane of 1st plane
	P1 = plane1
	P2 = plane1 : fill_prm(0,1000,0,	0,0,0)
	P3 = plane1 : fill_prm(1000,0,0,	0,0,0)
	
	
	-- get 3-point on XY-plane of 2nd plane
	P4 = plane2
	P5 = plane2 : fill_prm(0,1000,0,	0,0,0)
	P6 = plane2 : fill_prm(1000,0,0,	0,0,0)
	
	
	Ma = fill_MX(P1.x,	P1.y,	P1.z,
				  P2.x,	P2.y,	P2.z,
				  P3.x,	P3.y,	P3.z)
	
	Mc = fill_MX(1,	0,	0,
				 1,	0,	0,
				 1,	0,	0)
	
	M1 = kramer(Ma, Mc)-- coefficient 1st plane
	
	Ma = fill_MX(P4.x,	P4.y,	P4.z,
				  P5.x,	P5.y,	P5.z,
				  P6.x,	P6.y,	P6.z)
	M2 = kramer(Ma, Mc) -- coefficient 2nd plane
	
	-- calculate 1st point for X =1
	Ma = fill_MX(M1[1,1],	M1[2,1],		M1[3,1],
				  M2[1,1],	M2[2,1],		M2[3,1],
				  1,			0,			0)
				  
	M3 = kramer(Ma, Mc) -- first point of intersection
	 
	 -- check zero matrix
	 flag = FALSE
	 FOR i = 1 TO 3 DO
	 	IF M3[i,1] <> 0 THEN
	 		flag = TRUE
	 	ENDIF
	 ENDFOR
	
	--IF NOT(flag) THEN --solution exists
		-- save 1st point on cross line
		P1.X = M3[1,1]
		P1.Y = M3[2,1]
		P1.Z = M3[3,1]
		
	-- calculate 2nd point for X=1000
		Mc[3,1] = 1000

		M3 = kramer(Ma, Mc) -- 2nd point of intersection
		 
	
	-- check zero matrix
		 flag = FALSE
		 FOR i = 1 TO 3 DO
		 	IF M3[i,1] <> 0 THEN
	 			flag = TRUE
	 		ENDIF
		 ENDFOR
		 
		P2.X = M3[1,1]
		P2.Y = M3[2,1]
		P2.Z = M3[3,1] 
		
	-- get 3rd point on XY plane fist plane
		P3 = plane1
	
	TMP_FRM = FRAME(P1, P2, P3)	
	
	-- check co-directional new Z width Z of plane1	
	P4= INV(tmp_frm) : plane1 : fill_prm(0,0,1000, 0,0,0)
	
	IF P4.Z < 0 THEN 
		TMP_FRM = TMP_FRM : fill_prm(0,0,0, 180,0,0)		-- allign new Z width Z of plane1
	ENDIF 
	
	--offset frame for handy testing
	P4 = INV(TMP_FRM) : plane1
	
	
	Tmp_FRM = TMP_FRM : fill_prm(P4.X,0,0,  0,0,0)
	
	RETURN(TMP_FRM)
END Cross_Line
--=========================

BEGIN
END math_lib 